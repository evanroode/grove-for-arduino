/*  Arduino for Beginners with Grove
 *
 * This code is part of a course from Tech Explorations.
 * For information about this course, please see
 *
 * https://techexplorations.com/so/grove/
 *
 * For information on hardware components and the wiring needed to
 * run this sketch, please see the relevant lecture in the course.
 *
 *
 *  Created by Peter Dalmaris
 *
 */

#include <U8g2lib.h>

#ifdef U8X8_HAVE_HW_SPI
#include<SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include<Wire.h>
#endif

// Step 1: Draw a 1-bit bitmap with white background using https://www.pixilart.com/
// Step 2: Export to PNG
// Step 3: Convert PNG to XBM using https://convertio.co/
// Step 4: Open XBM file in a text editor and copy the char array values to the Arduino sketch.

U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R2, /* reset=*/ U8X8_PIN_NONE);

#define smiley_width 23
#define smiley_height 21
const unsigned char smiley_bits[] U8X8_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x70, 0xF0, 0x00, 0x70, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x80, 0x01, 0x30, 0x80, 0x00,
  0xE0, 0x71, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00,
};

#define triag_width 20
#define triag_height 20
const unsigned char triag_bits[] U8X8_PROGMEM = {
  0xFF, 0xFF, 0x0F, 0xFF, 0xFB, 0x0F, 0xFF, 0xF5, 0x0F, 0xFF, 0xF5, 0x0F,
  0xFF, 0xEE, 0x0F, 0xFF, 0xEE, 0x0F, 0x7F, 0xDF, 0x0F, 0x7F, 0xDF, 0x0F,
  0xBF, 0xBF, 0x0F, 0xBF, 0xBF, 0x0F, 0xDF, 0x7F, 0x0F, 0xEF, 0x7F, 0x0F,
  0xEF, 0xFF, 0x0E, 0xF7, 0xFF, 0x0E, 0xF7, 0xFF, 0x0D, 0xFB, 0xFF, 0x0D,
  0xFB, 0xFF, 0x0B, 0x01, 0x00, 0x08, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0x0F,
};

// The Tech Explorations logo
#define logo_width 80
#define logo_height 31
static const unsigned char logo_bits[] U8X8_PROGMEM = {
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x0E, 0xF0, 0xFF,
  0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x1E, 0xF0, 0xFF, 0xF9, 0xFE,
  0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x60, 0x7E, 0x9F, 0x69, 0xFC, 0xFF, 0xFF,
  0xFF, 0xFF, 0x01, 0x70, 0x1C, 0x04, 0x80, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF,
  0xE1, 0x70, 0xCE, 0x60, 0x98, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0x41,
  0x0C, 0xE0, 0x99, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x43, 0x0C, 0xF0,
  0x99, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x63, 0xCE, 0x61, 0x98, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x61, 0x0C, 0x04, 0x98, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0x03, 0xE0, 0x3E, 0x0E, 0x9D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x01, 0x60, 0xC0, 0xFF, 0xCF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0x03, 0x7C,
  0x80, 0xFF, 0xCF, 0xFF, 0xFF, 0xF6, 0xFF, 0xFF, 0x9F, 0x70, 0x7E, 0x07,
  0x4C, 0x58, 0x42, 0x34, 0x0E, 0x87, 0xDF, 0x70, 0x6C, 0x12, 0x48, 0x10,
  0x00, 0x10, 0x00, 0x02, 0xFF, 0x61, 0xC0, 0x90, 0x01, 0x93, 0x9D, 0x82,
  0xC9, 0xB0, 0xFF, 0x61, 0xE8, 0x98, 0x03, 0x87, 0x03, 0xD0, 0xE1, 0xC0,
  0xFF, 0x61, 0xFE, 0x90, 0x03, 0x87, 0x90, 0x80, 0xC9, 0x0C, 0xFF, 0x43,
  0x7A, 0x90, 0x09, 0x93, 0x0C, 0x96, 0xC1, 0x30, 0xFF, 0x47, 0x00, 0x06,
  0x48, 0x90, 0x81, 0x10, 0xE4, 0x00, 0xFF, 0xEF, 0x82, 0x8F, 0xEE, 0xFC,
  0xD3, 0x79, 0xEE, 0xCE, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0x7F, 0x28, 0x16, 0xC9, 0x11, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xA2, 0x48, 0x84, 0xC9, 0xA8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xA6,
  0x69, 0xD4, 0x5D, 0xA6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x18, 0x82, 0x45,
  0x11, 0xA5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0xDF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};



void setup() {
  u8g2.begin();
  u8g2.firstPage();
  do {
    draw();
  } while ( u8g2.nextPage() );
}

void loop() {
}

void draw(void) {
  u8g2.setDrawColor(0);
  // graphic commands to redraw the complete screen should be placed here
  u8g2.drawXBMP( 0, 0, logo_width, logo_height, logo_bits);
  u8g2.drawXBMP( 85, 0, smiley_width, smiley_height, smiley_bits);
  u8g2.setDrawColor(0);
  u8g2.drawXBMP( 20, 45, triag_width, triag_height, triag_bits);
}
